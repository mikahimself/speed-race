using Godot;
using System;
using System.Collections.Generic;

public class TileMapParts : TileMap
{
    public static int[][] widestStraight = {
        new int[] {3, 5, 9, 5, 16, 0, 0, 2, 0, 0, 0, 19, 6, 8, 5, 4, },
        new int[] {5, 3, 5, 6, 16, 0, 0, 0, 0, 0, 0, 19, 4, 3, 4, 3, },
        new int[] {4, 3, 9, 6, 16, 0, 0, 0, 0, 0, 0, 19, 3, 9, 4, 3, },
        new int[] {3, 8, 3, 4, 16, 0, 0, 0, 1, 0, 1, 19, 4, 3, 3, 3, },
        new int[] {3, 3, 9, 3, 16, 1, 0, 2, 0, 0, 0, 19, 5, 4, 9, 5, },
        new int[] {4, 9, 3, 6, 16, 0, 1, 1, 0, 0, 0, 19, 5, 3, 3, 3, },
        new int[] {3, 3, 10, 4, 16, 0, 0, 0, 0, 0, 2, 19, 3, 10, 4, 3, },
        new int[] {10, 4, 3, 3, 16, 2, 1, 0, 0, 0, 0, 19, 6, 5, 8, 4, },
        new int[] {4, 5, 5, 5, 16, 0, 0, 0, 0, 1, 1, 19, 3, 3, 3, 10, },
        new int[] {3, 10, 3, 5, 16, 0, 0, 0, 1, 0, 1, 19, 6, 3, 9, 3, },
    };
    public static int[][] wideStraight = {
        new int[] {3,  3,  5,  9, 5, 16, 0, 2, 0, 0, 19, 6,  8,  5,  4, 4, },
        new int[] {5,  8,  3,  5, 6, 16, 0, 0, 0, 0, 19, 4,  3, 11,  8, 3, },
        new int[] {4,  4,  3,  9, 6, 16, 0, 0, 0, 0, 19, 3,  9,  4,  3, 3, },
        new int[] {3,  3,  8,  3, 4, 16, 0, 0, 1, 0, 19, 4, 11,  3,  3, 3, },
        new int[] {3, 10,  3,  4, 3, 16, 0, 2, 0, 0, 19, 5,  4,  9,  5, 5, },
        new int[] {4,  4,  9,  3, 6, 16, 1, 1, 0, 0, 19, 5,  3,  3,  8, 3, },
        new int[] {3, 10,  3,  8, 4, 16, 0, 0, 0, 0, 19, 3, 10,  4,  3, 3, },
        new int[] {10, 6,  4,  3, 3, 16, 1, 0, 0, 0, 19, 6,  5,  8,  4, 4, },
        new int[] {4,  8,  5, 11, 5, 16, 0, 0, 0, 1, 19, 3,  8,  3, 10, 6, },
        new int[] {3,  3, 10,  3, 5, 16, 0, 0, 1, 0, 19, 6,  3,  9,  3, 3, },
    };

    public static int[][] narrowStraight = {
        new int[] {3, 3, 3, 11, 6, 5, 16, 2, 0, 19, 6, 11, 5, 9, 4, 8, },
        new int[] {5, 5, 8, 3, 5, 6, 16, 0, 0, 19, 4, 3, 9, 6, 3, 3, },
        new int[] {4, 11, 4, 3, 9, 6, 16, 0, 0, 19, 3, 9, 4, 11, 6, 3, },
        new int[] {3, 3, 3, 8, 3, 4, 16, 0, 1, 19, 4, 11, 3, 3, 3, 6, },
        new int[] {3, 3, 10, 3, 4, 3, 16, 2, 0, 19, 5, 4, 9, 5, 9, 5, },
        new int[] {4, 4, 4, 9, 3, 6, 16, 1, 0, 19, 5, 3, 8, 6, 6, 3, },
        new int[] {3, 3, 10, 3, 8, 4, 16, 0, 0, 19, 3, 9, 4, 9, 8, 6, },
        new int[] {10, 10, 6, 9, 3, 3, 16, 0, 0, 19, 6, 5, 11, 4, 4, 4, },
        new int[] {4, 4, 8, 5, 11, 5, 16, 0, 0, 19, 3, 11, 3, 10, 6, 6, },
        new int[] {3, 3, 3, 9, 3, 5, 16, 0, 1, 19, 6, 3, 9, 3, 3, 8, },
    };

    public static int[][] narrowestStraight = {
        new int[] {3, 9, 3, 3, 3, 9, 5, 16, 19, 6, 11, 5, 9, 4, 8, 5, },
        new int[] {5, 5, 5, 8, 3, 5, 6, 16, 19, 4, 3, 11, 6, 3, 3, 3, },
        new int[] {4, 4, 11, 4, 3, 11, 6, 16, 19, 3, 8, 4, 11, 6, 9, 3, },
        new int[] {3, 9, 3, 3, 8, 3, 9, 16, 19, 4, 11, 3, 3, 3, 6, 6, },
        new int[] {11, 3, 8, 10, 3, 4, 3, 16, 19, 5, 4, 11, 5, 9, 5, 5, },
        new int[] {4, 4, 4, 11, 9, 3, 6, 16, 19, 9, 3, 8, 6, 6, 10, 3, },
        new int[] {3, 8, 3, 10, 3, 8, 4, 16, 19, 3, 8, 4, 5, 8, 6, 6, },
        new int[] {10, 11, 8, 6, 9, 3, 3, 16, 19, 6, 5, 11, 4, 11, 4, 4, },
        new int[] {4, 4, 4, 8, 5, 11, 5, 16, 19, 11, 3, 8, 10, 6, 9, 6, },
        new int[] {3, 9, 3, 3, 9, 3, 5, 16, 19, 6, 5, 11, 3, 3, 5, 8, },
    };

    public static int[][] narrowStraightRight = {
        new int[] {9, 4, 10, 3, 5, 5, 9, 5, 3, 10, 16, 0, 0, 0, 19, 8, },
        new int[] {5, 10, 3, 9, 5, 5, 5, 5, 9, 3, 16, 0, 0, 1, 19, 11, },
        new int[] {11, 8, 7, 8, 5, 9, 5, 8, 3, 11, 16, 1, 1, 0, 19, 4, },
        new int[] {10, 6, 11, 3, 9, 5, 5, 9, 11, 3, 16, 1, 0, 0, 19, 9, },
        new int[] {3, 9, 8, 4, 3, 5, 9, 7, 8, 9, 16, 1, 0, 1, 19, 5, },
        new int[] {9, 3, 4, 3, 8, 3, 10, 5, 3, 8, 16, 1, 1, 0, 19, 10, },
        new int[] {3, 8, 3, 11, 6, 8, 7, 5, 10, 11, 16, 0, 1, 0, 19, 6, },
        new int[] {9, 3, 3, 7, 3, 11, 5, 7, 9, 5, 16, 0, 1, 1, 19, 8, },
        new int[] {5, 11, 9, 3, 10, 5, 9, 5, 5, 5, 16, 1, 1, 1, 19, 6, },
        new int[] {9, 3, 7, 4, 3, 7, 5, 10, 5, 9, 16, 1, 1, 1, 19, 9, },
    };



    public static int[][] centerToRight = {
        new int[] {9, 4, 10, 3, 5, 5, 5, 5, 8, 59, 60, 0, 0, 0, 36, 8, },
        new int[] {5, 10, 3, 9, 5, 5, 5, 5, 9, 61, 1, 0, 0, 1, 37, 3, },
        new int[] {11, 8, 7, 8, 5, 5, 5, 8, 59, 60, 1, 1, 1, 0, 38, 4, },
        new int[] {10, 6, 11, 3, 5, 5, 5, 9, 61, 0, 1, 1, 0, 48, 47, 9, },
        new int[] {3, 9, 8, 4, 3, 5, 8, 59, 60, 1, 1, 1, 0, 46, 5, 5, },
        new int[] {9, 3, 4, 3, 8, 3, 10, 61, 1, 1, 1, 1, 45, 47, 10, 3, },
        new int[] {3, 8, 3, 11, 6, 8, 59, 60, 0, 1, 0, 0, 49, 8, 6, 6, },
        new int[] {9, 3, 3, 7, 3, 11, 61, 0, 0, 1, 1, 35, 34, 11, 4, 4, },
        new int[] {5, 11, 9, 3, 10, 24, 25, 0, 1, 1, 0, 36, 10, 6, 9, 6, },
        new int[] {9, 3, 7, 4, 3, 26, 0, 0, 1, 0, 1, 37, 3, 3, 5, 8, },
        new int[] {3, 9, 3, 11, 8, 27, 0, 0, 1, 1, 0, 38, 3, 8, 4, 4, },
        new int[] {8, 3, 10, 4, 3, 28, 0, 2, 1, 1, 35, 34, 4, 3, 10, 3, },
    };

    public static int[][] rightToCenter = {
        new int[] { 1, 1, 1, 1, 1, 25,  0,  0,  0, 0, 16, 17,  1,  1, 1, 1 },
        new int[] { 1, 1, 1, 1, 1, 29,  0,  0,  0, 0,  0, 23,  1,  1, 1, 1 },
        new int[] { 1, 1, 1, 1, 1, 13,  0,  0,  0, 0,  0, 27,  1,  1, 1, 1 },
        new int[] { 1, 1, 1, 1, 1, 20, 21,  0,  0, 0,  0, 11,  1,  1, 1, 1 },
        new int[] { 1, 1, 1, 1, 1,  1, 25,  0,  0, 0,  0, 16, 17,  1, 1, 1 },
        new int[] { 1, 1, 1, 1, 1,  1, 29,  0,  0, 0,  0,  0, 23,  1, 1, 1 },
        new int[] { 1, 1, 1, 1, 1,  1, 13,  0,  0, 0,  0,  0, 27,  1, 1, 1 },
        new int[] { 1, 1, 1, 1, 1,  1, 20, 21,  0, 0,  0,  0, 11,  1, 1, 1 },
        new int[] { 1, 1, 1, 1, 1,  1,  1, 25,  0, 0,  0,  0, 16, 17, 1, 1 },
        new int[] { 1, 1, 1, 1, 1,  1,  1, 29,  0, 0,  0,  0,  0, 23, 1, 1 },
        new int[] { 1, 1, 1, 1, 1,  1,  1, 13,  0, 0,  0,  0,  0, 27, 1, 1 },
        new int[] { 1, 1, 1, 1, 1,  1,  1, 20, 21, 0,  0,  0,  0, 11, 1, 1 },
    };

    public static int[][] centerToLeft = {
        new int[] { 1, 1,  2,  0,  0,  0, 0,  9,  1,  1,  1, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 25,  0,  0,  0, 0, 16, 17,  1,  1, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 29,  0,  0,  0, 0,  0, 23,  1,  1, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 13,  0,  0,  0, 0,  0, 27,  1,  1, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 20, 21,  0,  0, 0,  0, 11,  1,  1, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 1,  25,  0,  0, 0,  0, 16, 17,  1, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 1,  29,  0,  0, 0,  0,  0, 23,  1, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 1,  13,  0,  0, 0,  0,  0, 27,  1, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 1,  20, 21,  0, 0,  0,  0, 11,  1, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 1,   1, 25,  0, 0,  0,  0, 16, 17, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 1,   1, 29,  0, 0,  0,  0,  0, 23, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 1,   1, 13,  0, 0,  0,  0,  0, 27, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 1,   1, 20, 21, 0,  0,  0,  0, 11, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 1,   1,  1,  2, 0,  0,  0,  0,  9, 1, 1, 1, 1, 1 },
    };

    public static int[][] leftToCenter = {
        new int[] { 1, 1, 1,   1, 14, 15, 0,  0,  0,  0, 24, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 1,   1, 22,  0, 0,  0,  0,  0, 28, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 1,   1, 26,  0, 0,  0,  0,  0, 12, 1, 1, 1, 1, 1 },
        new int[] { 1, 1,  1,  1, 10,  0, 0,  0,  0, 18, 19, 1, 1, 1, 1, 1 },
        new int[] { 1, 1,  1, 14, 15,  0, 0,  0,  0, 24,  1, 1, 1, 1, 1, 1 },
        new int[] { 1, 1,  1, 22,  0,  0, 0,  0,  0, 28,  1, 1, 1, 1, 1, 1 },
        new int[] { 1, 1,  1, 26,  0,  0, 0,  0,  0, 12,  1, 1, 1, 1, 1, 1 },
        new int[] { 1, 1,  1, 10,  0,  0, 0,  0, 18, 19,  1, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 14, 15,  0,  0, 0,  0, 24,  1,  1, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 22,  0,  0,  0, 0,  0, 28,  1,  1, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 26,  0,  0,  0, 0,  0, 12,  1,  1, 1, 1, 1, 1, 1 },
        new int[] { 1, 1, 10,  0,  0,  0, 0, 18, 19,  1,  1, 1, 1, 1, 1, 1 },
    };


    public static int[][] narrowStraightLeft = {
        new int[] {3, 9, 16, 1, 0, 19, 11, 5, 9, 4, 8, 5, 9, 4, 8, 5, },
        new int[] {11, 5, 16, 1, 1, 19, 3, 11, 6, 3, 3, 3, 6, 3, 3, 3, },
        new int[] {3, 11, 16, 1, 0, 19, 8, 4, 11, 6, 9, 3, 11, 6, 9, 3, },
        new int[] {8, 3, 16, 0, 0, 19, 11, 3, 11, 3, 6, 10, 3, 3, 6, 6, },
        new int[] {3, 9, 16, 0, 1, 19, 4, 11, 5, 9, 5, 8, 5, 9, 5, 5, },
        new int[] {9, 3, 16, 0, 1, 19, 3, 8, 6, 6, 10, 3, 6, 6, 10, 3, },
        new int[] {3, 8, 16, 0, 1, 19, 8, 4, 9, 8, 6, 11, 5, 8, 6, 6, },
        new int[] {9, 3, 16, 2, 1, 19, 5, 11, 4, 11, 4, 4, 4, 11, 4, 4, },
        new int[] {5, 11, 16, 1, 2, 19, 3, 8, 10, 6, 9, 6, 10, 6, 9, 6, },
        new int[] {9, 3, 16, 2, 0, 19, 5, 11, 3, 8, 5, 8, 3, 3, 5, 8, },
    };

    public static int[][] widestToWide = {
        new int[] {3, 3, 11, 9, 24, 25, 0, 2, 0, 0, 30, 29, 10, 3, 8, 4, },
        new int[] {3, 10, 3, 3, 26, 0, 0, 0, 0, 0, 0, 31, 3, 4, 3, 10, },
        new int[] {9, 8, 3, 5, 27, 0, 0, 0, 0, 0, 2, 32, 10, 8, 3, 3, },
        new int[] {3, 3, 9, 3, 28, 0, 0, 0, 1, 0, 0, 33, 3, 3, 10, 3, },
    };

    public static int[][] wideToNarrow = {
        new int[] {3, 9, 3, 11, 3, 24, 25, 2, 0, 30, 29, 10, 3, 8, 4, 4, },
        new int[] {3, 11, 10, 4, 3, 26, 0, 0, 0, 0, 31, 3, 4, 3, 10, 3, },
        new int[] {9, 4, 6, 3, 5, 27, 0, 0, 0, 2, 32, 10, 8, 3, 3, 3, },
        new int[] {3, 4, 3, 9, 3, 28, 0, 0, 1, 0, 33, 3, 3, 10, 3, 3, },
    };

    public static int[][] narrowToNarrowest = {
        new int[] {3, 3, 9, 3, 11, 8, 24, 25, 30, 29, 11, 3, 8, 4, 4, 4, },
        new int[] {3, 8, 3, 10, 4, 3, 26, 0, 0, 31, 3, 4, 3, 10, 3, 3, },
        new int[] {9, 11, 4, 6, 3, 9, 27, 0, 2, 32, 10, 8, 3, 3, 8, 3, },
        new int[] {3, 3, 8, 3, 9, 3, 28, 0, 0, 33, 3, 3, 10, 3, 3, 9, },
    };

    public static int[][] narrowestToNarrow = {
        new int[] {9, 4, 9, 4, 10, 3, 41, 0, 0, 36, 5, 11, 4, 8, 4, 8, },
        new int[] {5, 10, 5, 10, 3, 8, 42, 0, 0, 37, 8, 6, 11, 3, 3, 3, },
        new int[] {11, 3, 11, 8, 7, 9, 43, 0, 0, 38, 3, 10, 6, 4, 6, 9, },
        new int[] {3, 6, 10, 6, 8, 3, 39, 40, 35, 34, 10, 3, 3, 9, 3, 6, },
    };

    public static int[][] narrowToWide = {
        new int[] {4, 9, 4, 10, 3, 41, 0, 0, 0, 0, 36, 5, 11, 4, 8, 4, },
        new int[] {10, 5, 10, 3, 9, 42, 0, 0, 0, 0, 37, 9, 6, 11, 3, 3, },
        new int[] {3, 11, 8, 7, 8, 43, 0, 0, 0, 0, 38, 3, 10, 6, 4, 6, },
        new int[] {6, 10, 6, 11, 3, 39, 40, 1, 1, 35, 34, 8, 3, 3, 9, 3, },
    };

    public static int[][] wideToWidest = {
        new int[] {9, 4, 10, 3, 41, 0, 0, 0, 0, 0, 0, 36, 5, 11, 4, 8, },
        new int[] {5, 4, 3, 8, 42, 0, 0, 0, 0, 0, 0, 37, 8, 6, 3, 3, },
        new int[] {11, 10, 7, 9, 43, 0, 0, 0, 0, 0, 0, 38, 3, 10, 6, 9, },
        new int[] {3, 6, 9, 3, 39, 40, 2, 0, 0, 1, 35, 34, 10, 3, 3, 6, },
    };

    public static int[][] twoLaneStart = {
        new int[] { 1, 1, 1, 2, 0, 0, 0, 34, 41, 0, 0, 0, 9, 1, 1, 1 },
        new int[] { 1, 1, 1, 2, 0, 0, 0, 34, 41, 0, 0, 0, 9, 1, 1, 1 },
        new int[] { 1, 1, 1, 2, 0, 0, 0, 36, 42, 0, 0, 0, 9, 1, 1, 1 },
        new int[] { 1, 1, 1, 2, 0, 0, 0, 38, 43, 0, 0, 0, 9, 1, 1, 1 },
    };

    public static int[][] twoLaneStraight = {        
        new int[] { 1, 1, 1, 2, 0, 0, 0, 34, 41, 0, 0, 0, 9, 1, 1, 1 },
        new int[] { 1, 1, 1, 2, 0, 0, 0, 34, 41, 0, 0, 0, 9, 1, 1, 1 },
        new int[] { 1, 1, 1, 2, 0, 0, 0, 34, 41, 0, 0, 0, 9, 1, 1, 1 },
        new int[] { 1, 1, 1, 2, 0, 0, 0, 34, 41, 0, 0, 0, 9, 1, 1, 1 },
        new int[] { 1, 1, 1, 2, 0, 0, 0, 34, 41, 0, 0, 0, 9, 1, 1, 1 },
        new int[] { 1, 1, 1, 2, 0, 0, 0, 34, 41, 0, 0, 0, 9, 1, 1, 1 },
        new int[] { 1, 1, 1, 2, 0, 0, 0, 34, 41, 0, 0, 0, 9, 1, 1, 1 },
        new int[] { 1, 1, 1, 2, 0, 0, 0, 34, 41, 0, 0, 0, 9, 1, 1, 1 },
        new int[] { 1, 1, 1, 2, 0, 0, 0, 34, 41, 0, 0, 0, 9, 1, 1, 1 },
        new int[] { 1, 1, 1, 2, 0, 0, 0, 34, 41, 0, 0, 0, 9, 1, 1, 1 },
    };

    public static int[][] twoLaneEnd = {
        new int[] { 1, 1, 1, 2, 0, 0, 0, 30, 39, 0, 0, 0, 9, 1, 1, 1 },
        new int[] { 1, 1, 1, 2, 0, 0, 0, 32, 40, 0, 0, 0, 9, 1, 1, 1 },
        new int[] { 1, 1, 1, 2, 0, 0, 0, 34, 41, 0, 0, 0, 9, 1, 1, 1 },
        new int[] { 1, 1, 1, 2, 0, 0, 0, 34, 41, 0, 0, 0, 9, 1, 1, 1 },
    };

    public static int[][] twoLaneNarrowLeft = {
        new int[] { 1,  2, 0, 8, 45, 53, 55, 26, 0, 0, 0, 0, 12, 1, 1, 1,  },
        new int[] { 1,  2, 0, 11, 56, 45, 53, 10, 0, 0,  0, 18, 19, 1, 1, 1 },
        new int[] { 1, 25, 0, 16, 17, 45, 14, 15, 0, 0,  0, 24,  1, 1, 1, 1 },
        new int[] { 1, 29, 0, 0, 23, 53, 22,  0, 0, 0,  0, 28,  1, 1, 1, 1 },
        new int[] { 1, 13, 0, 0, 47, 45, 49,  0, 0, 0,  0, 12,  1, 1, 1, 1 },
        new int[] { 1, 20, 21, 0, 50, 51, 52,  0, 0, 0, 18, 19,  1, 1, 1, 1 }
    };

    public static int[][] rightTurn = {
        new int[] { }
    };

    public static List<int[][]> mapParts = new List<int[][]> 
    { 
        widestStraight, 
        wideStraight,
        narrowStraight,
        narrowestStraight,
        widestToWide,
        wideToNarrow,
        narrowToNarrowest,
        narrowestToNarrow,
        narrowToWide,
        wideToWidest,
        twoLaneStart,
        twoLaneStraight,
        twoLaneEnd,
        narrowStraightRight,
        narrowStraightLeft,
        centerToRight,
        rightToCenter,
        centerToLeft,
        leftToCenter,
        twoLaneNarrowLeft
    };
    /*
        0 - Widest *
        1 - Wide *
        2 - Narrow *
        3 - Narrowest *
        4 - Widest to Wide *
        5 - Wide to Narrow *
        6 - Narrow to Narrowest *
        7 - Narrowest to Narrow *
        8 - Narrow to Wide *
        9 - Wide to Widest *
       10 - Two Lane Start
       11 - Two Lane Straight
       12 - Two Lane End
       13 - Narrow Straight Right
       14 - Narrow Straight Left
       15 - Center to Right
    */

    public static List<int> track = new List<int> {
      //13, 15, 1, 4, 0, 9, 1, 8, 2, 7, 3, 6, 2, 5, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
      0, 0, 
    };
}
